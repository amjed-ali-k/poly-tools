generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleTypes {
  USER
  ADMIN
  MODERATOR
  CREATOR
}

enum UserStatus {
  BANNED
  ACTIVE // can post, comment, vote, etc
}

model Role {
  id   String    @id @default(uuid())
  user User[]
  role RoleTypes @unique
}

/// This is a table that contains all the user links they can add to profile
model User {
  id String @id

  name          String
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  image         String?
  roles         Role[]

  /// this is the bio that shows up on the profile page
  bio         String  @default("") @db.VarChar(256)
  designation String?

  status UserStatus @default(ACTIVE)

  college   College? @relation(fields: [collegeId], references: [code])
  collegeId String?

  branches Branch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallet Wallet?

  courses Course[]

  createdExamResults      ExamResult[]
  createdBatches          Batch[]
  ExamResultFormatHistory ExamResultFormatHistory[]
  ExamHall                ExamHall[]

  @@index([collegeId])
}

model Wallet {
  id String @id @default(uuid())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StudentStatus {
  DISCONTINUED
  PASSOUT
  ACTIVE
}

model Student {
  id String @id @default(uuid())

  registerNo  String? @unique
  name        String
  email       String? @unique
  phone       String? @unique
  admissionNo String?

  college   College? @relation(fields: [collegeId], references: [code])
  collegeId String

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId String

  rollNo Int?
  image  String?
  status StudentStatus @default(ACTIVE)

  cgpa Int?

  examResults ExamResult[]

  batch Batch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses     Course[]
  attendances Attendance[]

  @@index([collegeId])
  @@index([branchId])
}

model College {
  id String @id @default(uuid())

  name String @unique
  code String @unique

  students Student[]
  branches Branch[]
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  batches Batch[]
}

model Branch {
  id String @id @default(uuid())

  name String @unique
  code String @unique

  colleges College[]
  users    User[]
  students Student[]

  subjects Subject[]
  courses  Course[]

  batches Batch[]
}

model Subject {
  code    String @id @unique
  name    String
  credits Int?

  revision Int
  category String
  branches Branch[]

  marks Mark[]

  semester       Int
  totalMarks     Int?
  type           SubjectType
  evaluationMode EvaluationMode

  courses Course[]
}

//  EXAM RESULT ANALYSIS PURPOSES

model ExamResultFormatHistory {
  id String @id @default(uuid())

  data Json

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  semesters Json

  regularResultCount       Int
  supplementaryResultCount Int

  month String
  year  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
}

enum ExamType {
  REGULAR
  SUPPLEMENTARY
}

model ExamResult {
  id Int @id @default(autoincrement())

  student      Student? @relation(fields: [studentRegNo], references: [registerNo])
  studentRegNo String

  month String
  year  Int

  type ExamType @default(REGULAR)

  semester Int

  marks Mark[]

  sgpa String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  @@index([studentRegNo])
  @@index([createdById])
}

model Mark {
  id Int @id @default(autoincrement())

  exam   ExamResult @relation(fields: [examId], references: [id])
  examId Int

  subject     Subject @relation(fields: [subjectCode], references: [code])
  subjectCode String

  grade    String?
  internal String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([examId])
  @@index([subjectCode])
}

enum SubjectType {
  THEORY
  PRACTICAL
  DRAWING
}

enum EvaluationMode {
  INTERNAL
  EXTERNAL
}

// ATTENDANCE PURPOSES

enum CourseStatus {
  ACTIVE
  COMPLETED
}

enum BatchStatus {
  ACTIVE
  PASSEDOUT
}

model Batch {
  id String @id @default(uuid())

  college   College @relation(fields: [collegeId], references: [id])
  collegeId String

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId String

  students Student[]

  courses Course[]

  name String

  status BatchStatus @default(ACTIVE)

  passoutYear Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  @@index([collegeId])
  @@index([branchId])
  @@index([createdById])
}

model Course {
  id String @id @default(uuid())

  college   College @relation(fields: [collegeId], references: [id])
  collegeId String

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId String

  batch   Batch  @relation(fields: [batchId], references: [id])
  batchId String

  users    User[]
  students Student[]

  subject     Subject @relation(fields: [subjectCode], references: [code])
  subjectCode String

  status CourseStatus @default(ACTIVE)

  semester Int
  year     Int

  periods Period[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([collegeId])
  @@index([branchId])
  @@index([subjectCode])
  @@index([batchId])
}

model Period {
  id String @id @default(uuid())

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  startTime DateTime
  endTime   DateTime

  attendance Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Attendance {
  id String @id @default(uuid())

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String

  period   Period? @relation(fields: [periodId], references: [id])
  periodId String

  isPresent Boolean @default(true)
  lateTime  Int? // in minutes
  isLate    Boolean @default(false)

  @@index([studentId])
  @@index([periodId])
}

model Tool {
  slug String @id @unique

  author    String
  authorUrl String

  name        String
  description String
  type        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes Int @default(0)
  views Int @default(0)
}

model ExamHall {
  id String @id @default(uuid())

  name String

  commonSeats      Int
  theoryOnlySeats  Int
  drawingOnlySeats Int

  structure Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}
